{"version":3,"file":"static/js/892.dc92880c.chunk.js","mappings":"6OAEMA,EAAcC,EAAAA,GAAAA,MAAH,oJASXC,EAAeD,EAAAA,GAAAA,OAAH,kKAUZE,EAAaF,EAAAA,GAAAA,KAAH,+C,2BChBHG,EAAc,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SAC5B,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BC,EAAAA,EAAAA,UAAQ,UAACF,EAAaG,IAAI,gBAAlB,QAA8B,IAAhE,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,2BACE,UAACT,EAAD,CACEU,SAAU,SAAAC,GACRA,EAAEC,iBAVW,SAAAJ,GAEnBH,EADyB,KAAVG,EAAe,CAAEA,MAAOA,GAAU,CAAC,GAElDN,EAASM,EACV,CAOOK,CAAaL,EACd,EAJH,WAME,kBAAOM,QAAQ,GAAf,UACE,SAACjB,EAAD,CACEkB,KAAK,OACLC,MAAOR,EACPS,YAAY,8BACZC,SAvBU,SAAAP,GAClBF,EAASE,EAAEQ,OAAOH,MACnB,OAyBK,SAACjB,EAAD,CAAcgB,KAAK,SAAnB,UACE,SAAC,MAAD,CAAUK,MAAM,KAAKC,OAAO,aAKrC,E,2BCvCKC,GAAaxB,EAAAA,EAAAA,IAAOyB,EAAAA,GAAPzB,CAAH,2CAIV0B,EAAW1B,EAAAA,GAAAA,GAAH,mECJD2B,EAAgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACxBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACJ,EAAD,iBACGE,QADH,IACGA,OADH,EACGA,EAAQG,KAAI,SAAAC,GACX,OACE,yBACE,SAACR,EAAD,CAAYS,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAA9C,SACGG,EAAMK,SAFFL,EAAME,GAMlB,KAGN,ECsBD,EAnCe,WACb,OAA0B1B,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA0CH,EAAAA,EAAAA,UAAS,IAAnD,eAAO8B,EAAP,KAAsBC,EAAtB,KAyBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,GAAc,KAAV9B,QAA0B+B,IAAV/B,EAApB,CAGA,IAAMgC,EAAa,IAAIC,gBAWvB,OAVAC,EAAAA,EAAAA,IAAA,UACUC,EAAAA,IADV,OACwBnC,GAAS,CAC7BoC,OAAQJ,EAAWI,SAEpBC,MAAK,SAAAC,GACJ,IACUC,EACND,EADFE,KAAQD,QAEVV,GAAiB,OAAIU,GACtB,IACI,WACLP,EAAWS,OACZ,CAdA,CAeF,GAAE,CAACzC,KAGF,4BACE,SAACP,EAAD,CAAaC,SAzBA,SAAAM,GACfC,EAASD,EACV,KAwBG,SAACiB,EAAD,CAAeC,OAAQU,MAG5B,C","sources":["components/SearchMovies/SearchMovies.styled.js","components/SearchMovies/SearchMovies.jsx","components/MoviesByQuery/MoviesByQuery.styled.js","components/MoviesByQuery/MoviesByQuery.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nconst StyledInput = styled.input`\r\n  display: inline-block;\r\n  width: 450px;\r\n  font-size: 18px;\r\n  outline: none;\r\n\r\n  border: 1px solid rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nconst SearchButton = styled.button`\r\n  position: absolute;\r\n  top: 20%;\r\n  left: 425px;\r\n  display: inline-flex;\r\n  border: 0;\r\n  background-color: #fff;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst SearchForm = styled.form`\r\n  position: relative;\r\n`;\r\nexport { StyledInput, SearchButton, SearchForm };\r\n","import { useSearchParams } from 'react-router-dom';\r\nimport { StyledInput, SearchButton, SearchForm } from './SearchMovies.styled';\r\nimport { ImSearch } from 'react-icons/im';\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nexport const SerchMovies = ({ getQuery }) => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [query, setQuery] = useState(searchParams.get('query') ?? '');\r\n\r\n  const updateQuery = e => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  const onSubmitForm = query => {\r\n    const params = query !== '' ? { query: query } : {};\r\n    setSearchParams(params);\r\n    getQuery(query);\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <SearchForm\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          onSubmitForm(query);\r\n        }}\r\n      >\r\n        <label htmlFor=\"\">\r\n          <StyledInput\r\n            type=\"text\"\r\n            value={query}\r\n            placeholder=\"Write the name of the movie\"\r\n            onChange={updateQuery}\r\n          />\r\n        </label>\r\n\r\n        <SearchButton type=\"submit\">\r\n          <ImSearch width=\"10\" height=\"10\" />\r\n        </SearchButton>\r\n      </SearchForm>\r\n    </main>\r\n  );\r\n};\r\n\r\nSerchMovies.propTypes = {\r\n  getQuery: PropTypes.func.isRequired,\r\n};\r\n","import styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst StyledLink = styled(NavLink)`\r\n  color: #2025c3;\r\n`;\r\n\r\nconst StyledUl = styled.ul`\r\n  margin-top: 10px;\r\n  margin-left: 30px;\r\n`;\r\nexport { StyledLink, StyledUl };\r\n","import { useLocation } from 'react-router-dom';\r\nimport { StyledLink, StyledUl } from './MoviesByQuery.styled';\r\nimport PropTypes from 'prop-types';\r\nexport const MoviesByQuery = ({ movies }) => {\r\n  const location = useLocation();\r\n  return (\r\n    <StyledUl>\r\n      {movies?.map(movie => {\r\n        return (\r\n          <li key={movie.id}>\r\n            <StyledLink to={`${movie.id}`} state={{ from: location }}>\r\n              {movie.title}\r\n            </StyledLink>\r\n          </li>\r\n        );\r\n      })}\r\n    </StyledUl>\r\n  );\r\n};\r\n\r\nMoviesByQuery.propTypes = {\r\n  movies: PropTypes.array.isRequired,\r\n};\r\n","import { SerchMovies } from 'components/SearchMovies/SearchMovies';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { UrlForQuery } from 'Utilities/variables';\r\nimport { MoviesByQuery } from 'components/MoviesByQuery/MoviesByQuery';\r\nconst Movies = () => {\r\n  const [query, setQuery] = useState('');\r\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\r\n\r\n  const getQuery = query => {\r\n    setQuery(query);\r\n  };\r\n  useEffect(() => {\r\n    if (query === '' || query === undefined) {\r\n      return;\r\n    }\r\n    const controller = new AbortController();\r\n    axios\r\n      .get(`${UrlForQuery}${query}`, {\r\n        signal: controller.signal,\r\n      })\r\n      .then(res => {\r\n        const {\r\n          data: { results },\r\n        } = res;\r\n        setMoviesByQuery([...results]);\r\n      });\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [query]);\r\n\r\n  return (\r\n    <div>\r\n      <SerchMovies getQuery={getQuery} />\r\n      <MoviesByQuery movies={moviesByQuery} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"names":["StyledInput","styled","SearchButton","SearchForm","SerchMovies","getQuery","useSearchParams","searchParams","setSearchParams","useState","get","query","setQuery","onSubmit","e","preventDefault","onSubmitForm","htmlFor","type","value","placeholder","onChange","target","width","height","StyledLink","NavLink","StyledUl","MoviesByQuery","movies","location","useLocation","map","movie","to","id","state","from","title","moviesByQuery","setMoviesByQuery","useEffect","undefined","controller","AbortController","axios","UrlForQuery","signal","then","res","results","data","abort"],"sourceRoot":""}